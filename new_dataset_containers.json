{
    "alpine": {
        "enable": "false",
        "status": "don't consider it",
        "reason": "vanilla distribution, doesn't run any serverside programs",
        "image-name": "alpine",
        "image-url": "alpine",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "1"
    },
	"ubuntu": {
        "enable": "false",
        "status": "don't consider it",
        "reason": "vanilla distribution, doesn't run any serverside program",
        "image-name": "ubuntu",
        "image-url": "ubuntu",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "2"
    },

     "busybox": {
        "enable": "false",
        "status": "don't consider it",
        "reason": "vanilla distribution, doesn't run any serverside programs",
        "image-name": "busybox",
        "image-url": "busybox",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "3"
    },
      "python": {
        "enable": "false",
        "status": "don't consider it",
        "reason": "vanilla installation",
        "image-name": "python",
        "image-url": "python",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "4"
    },
      "redis": {
        "enable": "false",
	"status": "worked on angr, cofine, and confine-",
        "image-name": "redis",
        "image-url": "redis",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "5",
        "binaries": [
            "redis-server"
        ],
        "docker-cmd": [
            "redis-server"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/redis-server"
    },
    "nginx": {
        "enable": "false",
	"status": "worked on angr, cofine, and confine-",
        "image-name": "nginx",
        "image-url": "nginx",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "6",
        "binaries": [
            "nginx"
        ],
        "docker-cmd": [
            "nginx",
            "-g",
            "daemon off;"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/nginx"
    },
  	"postgres": {
        "enable": "false",
	"status": "worked on angr, cofine, and confine-(check it, didn't work in the new version)",
        "image-name": "postgres",
        "image-url": "postgres",
        "options": "-e POSTGRES_PASSWORD=password",
        "args": "",
        "dependencies": {},
        "id": "7",
        "binaries": [
            "postgres"
        ],
        "docker-cmd": [
            "postgres"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/postgres"
    },
    "node": {
        "enable": "false",
	"status": "worked on angr, cofine, and confine-",
        "image-name": "node",
        "image-url": "node",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "8",
        "binaries": [
            "node"
        ],
        "docker-cmd": [
            "node"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/node"
    },	
 	"mysql": {
        "enable": "false",
	"status": "worked on angr, cofine, and confine-",
        "image-name": "mysql",
        "image-url": "mysql",
        "options": "-e MYSQL_ROOT_PASSWORD=my-secret-pw",
        "args": "",
        "dependencies": {},
        "id": "9",
        "binaries": [
            "mysqld"
        ],
        "docker-cmd": [
            "mysqld"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/mysqld"
    }, 
    "traefik": {
        "enable": "false",
        "status": "don't consider it",
        "reason": "go-based",
        "image-name": "traefik",
        "image-url": "traefik",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "10",
        "binaries": [
            "traefik"
        ],
        "docker-cmd": [
            "traefik"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/traefik"
    },
    "httpd": {
        "enable": "false",
	"status": "worked on angr, cofine, and confine-",
        "image-name": "httpd",
        "image-url": "httpd",
        "binaries": [
            "httpd",
            "httpd-foreground"
        ],
        "docker-cmd": [
            "httpd", 
            "-D", 
            "FOREGROUND"
        ],
		"id": "11",
        "entrypoint": "",
        "docker-path": "/home/confine/httpd"
    },
	"hello-world": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "too simple",
        "image-name": "hello-world",
        "image-url": "hello-world",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "12"
    },
	"memcached": {
        "enable": "false",
		"status": "worked on angr, cofine, and confine-",
        "image-name": "memcached",
        "image-url": "memcached",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "13",
        "binaries": [
            "memcached"
        ],
        "docker-cmd": [
            "memcached"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/memcached"
    },

	"mongo": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "angr crashes when wants to recover CFG",
        "image-name": "mongo",
        "image-url": "mongo",
        "category": [
            "Databases"
        ],
        "pull-count": 1831318554,
        "official": true,
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "14",
        "binaries": [
            "mongod"
        ],
        "docker-cmd": [
            "mongod"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/mongod"
    },
	"registry": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "go-based",
        "image-name": "registry",
        "image-url": "registry",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "15",
        "binaries": [
            "registry"
        ],
        "docker-cmd": [
            "registry"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/registry"
    },
	"openjdk": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation",
        "image-name": "openjdk",
        "image-url": "openjdk",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "16"
    },
	"mariadb": {	
        "enable": "false",
	"status": "worked on angr, cofine, and confine-",
        "image-name": "mariadb",
        "image-url": "mariadb",
        "options": "-e MYSQL_ROOT_PASSWORD=my-secret-pw",
        "args": "",
        "dependencies": {},
        "id": "17",
        "binaries": [
            "mariadbd"
        ],
        "docker-cmd": [
            "mysqld"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/mysqld"
    },
	"golang": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation of golang",
        "image-name": "golang",
        "image-url": "golang",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "18"
    },
	"wordpress": {
        "enable": "false",
	"status": "worked on angr, but did not work in confine and confine-, dependent container. check it!",
        "image-name": "wordpress",
        "image-url": "wordpress",
        "options": "-e WORDPRESS_DB_PASSWORD=wpuser@ -p 80:80 -v /tmp/html:/var/www/html",
        "args": "",
        "binaries": [
            "apache2"
        ],
		"dependencies":
        {
            "mariadb": {
                "image-name": "mysql",
                "image-url": "mysql",
                "options": "-e MYSQL_ROOT_PASSWORD=aqwe123 -e MYSQL_USER=wpuser -e MYSQL_PASSWORD=wpuser@ -e MYSQL_DATABASE=wordpress_db",
                "link": true
            }
        },
        "id": "19"
    },
	"docker": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation of docker",
        "image-name": "docker",
        "image-url": "docker",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "20"
    },
	"rabbitmq": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "it contains more than one binary",
        "image-name": "rabbitmq",
        "image-url": "rabbitmq",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "21"
    },
	"influxdb": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "didn't work in Confine, leaving out. Also, it is a go-based application",
        "image-name": "influxdb",
        "image-url": "influxdb",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "22",
        "binaries": [
            "influxd"
        ],
        "docker-cmd": [
            "influxd"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/influxd"
    },
	"consul": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "runs two programs, consul and dumb-init. might have problems, but should look into it. Also, it is a go-based application",
        "image-name": "consul",
        "image-url": "consul",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "23",
        "binaries": [
            "consul"
        ],
        "docker-cmd": [
            "consul",
            "agent",
            "-dev",
            "-client",
            "0.0.0.0"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/consul"
    },
	"nextcloud": {
        "enable": "false",
	"status": "worked on angr and confine, and confine-",
        "image-name": "nextcloud",
        "image-url": "nextcloud",
        "binaries": [
            "apache2"
        ],
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "24",
        "binaries": [
            "apache2"
        ],
        "docker-cmd": [
            "apache2-foreground"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/nextcloud"
    
    },
	"haproxy": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "not in confine due to complex configuration",
        "image-name": "haproxy",
        "image-url": "haproxy",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "25"
    },
	"debian": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation",
        "image-name": "debian",
        "image-url": "debian",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "26"
    },
	"sonarqube": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "runs multiple java applications, similar to java",
        "image-name": "sonarqube",
        "image-url": "sonarqube",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "27"
    },
	"ruby": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation",
        "image-name": "ruby",
        "image-url": "ruby",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "28"
    },
	"elasticsearch": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "run serveral applications",
        "image-name": "elasticsearch",
        "image-url": "elasticsearch:7.1.0",
        "options": "-p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\"",
        "args": "",
        "dependencies": {},
        "id": "29"
    },
	"centos": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation",
        "image-name": "centos",
        "image-url": "centos",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "30"
    },
	"php": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation, and angr crashes when wants to recover CFG",
        "image-name": "php",
        "image-url": "php",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "31",
        "binaries": [
            "php"
        ],
        "docker-cmd": [
            "php"
        ],
        "entrypoint": "docker-php-entrypoint",
        "docker-path": "/home/confine/php"
    },
	"tomcat": {
        "enable": "false",
	"status": "worked on angr and confine, but didn't work in confine-(hardened with problem), check it",
	"image-name": "tomcat",
        "image-url": "tomcat",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "32",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "catalina.sh",
            "run"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/catalina.sh"
    },
	"amazonlinux": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla distribution",
        "image-name": "amazonlinux",
        "image-url": "amazonlinux",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "33"
    },
	"maven": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "not in confine due to complex configuration",
        "image-name": "maven",
        "image-url": "maven",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "34"
    },
	"eclipse-mosquitto": {
        "enable": "false",
	"status": "don't consider it",
	"reason": "uses musl-libc",
        "image-name": "eclipse-mosquitto",
        "image-url": "eclipse-mosquitto",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "35",
        "binaries": [
            "mosquitto"
        ],
        "docker-cmd": [
            "mosquitto"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/mosquitto"
    },
	"telegraf": {
        "enable": "false",
	"status": "worked on angr, confine, and confine-",
        "image-name": "telegraf",
        "image-url": "telegraf",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "36",
        "binaries": [
            "telegraf"
        ],
        "docker-cmd": [
            "telegraf"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/telegraf"
    },
	"bash": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't run any server-side program",
        "image-name": "bash",
        "image-url": "bash",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "37"
    },
	"vault": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "go-based",
        "image-name": "vault",
        "image-url": "vault",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "38",
        "binaries": [
            "vault"
        ],
        "docker-cmd": [
            "vault",
            "server",
            "dev"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/vault"
    },
	"caddy": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "go-based",
        "image-name": "caddy",
        "image-url": "caddy",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "39"
    },
	"adminer": {
        "enable": "false",
        "image-name": "adminer",
        "image-url": "adminer",
	"status": "don't consider it",
        "reason": "angr crashes when wants to recover CFG for php",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "40",
        "binaries": [
            "php"
        ],
        "docker-cmd": [
            "php",
            "-S",
            "[::]:8080",
            "-t",
            "/var/www/html"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/adminer"
    },
	"mongo-express": {
        "enable": "false",
	"status": "worked on angr, but didn't work in confine- and confine, check it, needs options but it doesn't work",
        "image-name": "mongo-express",
        "image-url": "mongo-express",
        "options": "-network networks -e ME_CONFIG_MONGODB_SERVER=mongof -p 8081:8081",
        "args": "",
        "dependencies": {},
        "id": "41",
        "binaries": [
            "node"
        ],
        "docker-cmd": [
            "mongo-express"
        ],
        "entrypoint": "/docker-entrypoint.sh",
        "docker-path": "/home/confine/mongo-express"
    },
	"ghost": {
        "enable": "false",
	"status": "worked in angr, confine ,and confine-",
        "image-name": "ghost",
        "image-url": "ghost",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "42",
        "binaries": [
            "node"
        ],
        "docker-cmd": [
            "node",
            "current/index.js"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/node"

    },
	"logstash": {
        "enable": "false",
	"status": "worked on angr, but did not did not work in confine- and confine, check it",
        "image-name": "logstash",
        "image-url": "logstash:7.16.3",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "43",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "logstash:7.10.3"
        ],
        "entrypoint": "docker-entrypoint",
        "docker-path": "/home/confine/logstash"
    },
	"zookeeper": {
        "enable": "false",
	"status": "worked on angr and confine,and confine-",
        "image-name": "zookeeper",
        "image-url": "zookeeper",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "44",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "zkServer.sh",
            "start-foreground"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/zookeeper"
    },
	"gradle": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't run in confine, a build tool. needs to be passed a project to be built",
        "image-name": "gradle",
        "image-url": "gradle",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "45"
    },
	"kong": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "didn't run in confine paper either",
        "image-name": "kong",
        "image-url": "kong",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "46"
    },
	"kibana": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "runs node and tini program",
        "image-name": "kibana",
        "image-url": "kibana:7.1.0",
        "options": "-p 5601:5601",
        "args": "",
        "dependencies": {},
        "id": "47"
    },
	"solr": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "based on java, runs another program with tini,more than one",
        "image-name": "solr",
        "image-url": "solr",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "48",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "solr",
            "-p",
            "8983:8983"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/solr"
    },
	"neo4j": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "tini and a java program",
        "image-name": "neo4j",
        "image-url": "neo4j",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "49"
    },
	"java": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation and depricated",
        "image-name": "java",
        "image-url": "java",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "50"
    },
	"couchdb": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "similar to couchbase, runs multiple programs with erlang",
        "image-name": "couchdb",
        "image-url": "couchdb",
        "options": "-e COUCHDB_USER=admin -e COUCHDB_PASSWORD=password",
        "args": "",
        "dependencies": {},
        "id": "51"
    },
	"cassandra": {
        "enable": "false",
        "image-name": "cassandra",
        "image-url": "cassandra",
	"status": "don't consider it",
	"reason": "ASCII text as executable",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "46",
        "binaries": [
            "cassandra"
        ],
        "docker-cmd": [
            "cassandra",
            "-f"
        ],
		"id": "52",
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/cassandra"
    },
	"nats": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "seems to run a single server application, but can't connect to container to confirm. no bash available",
        "image-name": "nats",
        "image-url": "nats",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "53",
        "binaries": [
            "nats-server"
        ],
        "docker-cmd": [
            "nats-server"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/natsserver"
    },
	"teamspeak": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't work in confine either",
        "image-name": "teamspeak",
        "image-url": "teamspeak",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "54"
    },
	"percona": {
        "enable": "false",
	"status": "worked on angr , but did not didn't work in confine- and confine, needs option but it doesn't work in confine ",
        "image-name": "percona",
        "image-url": "percona",
        "options": " -e MYSQL_ROOT_PASSWORD=my-secret-pw ",
        "args": "",
        "dependencies": {},
        "id": "55",
        "binaries": [
            "mysqld"
        ],
        "docker-cmd": [
            "mysqld"
        ],
        "entrypoint": "docker-entrypoint.sh",
        "docker-path": "/home/confine/mysqld"
    },
	"jenkins": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "runs two applications, tini and java based. should be similar to other java applications",
        "image-name": "jenkins",
        "image-url": "jenkins",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "56"
    },
	"buildpack-deps": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't run any server-side application",
        "image-name": "buildpack-deps",
        "image-url": "buildpack-deps",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "57"
    },
	"perl": {
        "enable": "false",
	"status": "worked on angr and cofine, but didn't did not work in confine- (profile successfuly created but the container does not start with it)and confine ?",
        "image-name": "perl",
        "image-url": "perl",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "58",
        "binaries": [
            "perl5.32.1"
        ],
        "docker-cmd": [
            "perl5.32.1"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/perl5.32.1"
    },
	"nats-streaming": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "go-based",
        "image-name": "nats-streaming",
        "image-url": "nats-streaming",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "59",
        "binaries": [
            "nats-streaming"
        ],
        "docker-cmd": [
            "nats-streaming"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/nats-streaming"
    },
	"rocket.chat": {
        "enable": "false",
	"status": "can not see the running services, bash does not contain ps command and does not the authorithy to install, dependet to mongo, check it",
        "image-name": "rocket.chat",
        "image-url": "rocket.chat",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "60",
        "binaries": [
            "???"
        ],
        "docker-cmd": [
			"???"
        ],
        "entrypoint": "",
        "docker-path": ""
    },
	"groovy": {
        "enable": "false",
        "status": "worked in angr and confine, didn't work in cofine-, profile created didn't start, check it",
        "image-name": "groovy",
        "image-url": "groovy",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "61",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "groovysh"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/groovysh"
    },
	"drupal": {
        "enable": "false",
        "status": "works in angr and confine, but didn't in confine-, check it",
        "image-name": "drupal",
        "image-url": "drupal",
        "options": "",
        "args": "",
		"binaries": [
            "apache2"
        ],
		"docker-cmd": [
            "apache2-foreground"
        ],
		"dependencies": {},
        "id": "62",
        "entrypoint": "docker-php-entrypoint",
        "docker-path": "/home/confine/drupal"

    },
	"swarm": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't run in confine",
        "image-name": "swarm",
        "image-url": "swarm",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "63"
    },
	"owncloud": {
        "enable": "false",
        "status": "works in angr and confine, but it didn't work in confine- ,check it",
        "image-name": "owncloud",
        "image-url": "owncloud:8.1",
        "options": "",
		"binaries": [
            "apache2"
        ],
        "args": "",
        "dependencies": {},
        "id": "64",
		"docker-cmd": [
            "apache2-foreground"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/owncloud"

    },
	"couchbase": {
        "enable": "false",
        "image-name": "couchbase",
        "image-url": "couchbase",
	"status": "don't consider it",
        "reason": "not elf, confine- has a problem",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "65",
        "binaries": [
            "couchbase-server"
        ],
        "docker-cmd": [
            "couchbase-server"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/couchbase-server"
    },
	"flink": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "didn't work with confine",
        "image-name": "flink",
        "image-url": "flink",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "66"
    },
	"pypy": {
        "enable": "false",
	"status": "worked in confine and angr, but in confine-, the seccomp profile created but it didn't work , check it",
        "image-name": "pypy",
        "image-url": "pypy",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "67",
        "binaries": [
            "pypy3"
        ],
        "docker-cmd": [
            "pypy3"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/pypy"
    },
	"rethinkdb": {
        "enable": "false",
	"status": "don't consider it",
	"reason": "angr crashes",
        "image-name": "rethinkdb",
        "image-url": "rethinkdb",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "68",
        "binaries": [
            "rethinkdb"
        ],
        "docker-cmd": [
            "rethinkdb",
            "--bind",
            "all"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/rethinkdb"
    },
	"composer": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't work in confine either",
        "image-name": "composer",
        "image-url": "composer",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "69"
    },
	"fedora": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla distribution, doesn't run anything",
        "image-name": "fedora",
        "image-url": "fedora",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "70"
    },
	"jruby": {
        "enable": "false",
	"status": "work in angr and confine,but in confine-, the seccomp profile created but it did not work ,check it",
        "image-name": "jruby",
        "image-url": "jruby",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "71",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "irb"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/jruby"
    },
	"rust": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't run anything",
        "image-name": "rust",
        "image-url": "rust",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "72"
    },
	"odoo": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "dies after waiting for postgresql, has dependency, skip for now",
        "image-name": "odoo",
        "image-url": "odoo",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "73"
    },
	"elixir": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "similar to couchbase, should look into, maybe we can find a solution. mostly for programs written with erlang",
        "image-name": "elixir",
        "image-url": "elixir",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "74"
    },
	"adoptopenjdk": {
        "enable": "false",
	"status": "don't consider it",
        "image-name": "adoptopenjdk",
        "image-url": "adoptopenjdk",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "75"
    },
	"kapacitor": {
        "enable": "false",
	"status": "don't consider it",
	"reason": "kapacitord statically linked",
        "image-name": "kapacitor",
        "image-url": "kapacitor",   
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "76",
        "binaries": [
            "kapacitord"
        ],
        "docker-cmd": [
            "kapacitord"
        ],
        "entrypoint": "entrypoint.sh",
        "docker-path": "/home/confine/kapacitor"
    },
	"jetty": {
        "enable": "false",
        "image-name": "jetty",
        "image-url": "jetty",
	"status": "don't consider it",
	"reason": "but it does not run anything",
        "options": "",
        "args": "",
        "dependencies": {},
		"id": "77"
    },
	"erlang": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "similar to couchbase, should look into, maybe we can find a solution. mostly for programs written with erlang, it runs more than one",
        "image-name": "erlang",
        "image-url": "erlang",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "78"
    },
	"websphere-liberty": {
        "enable": "false",
	"status": "worked on angr and confine, but didn't work in confine-(entrypoint error) check it",
        "image-name": "websphere-liberty",
        "image-url": "websphere-liberty",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "79",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "/opt/ibm/wlp/bin/server",
            "run",
            "defaultServer"
        ],
        "entrypoint": "/opt/ibm/helpers/runtime/docker-server.sh",
        "docker-path": "/home/confine/websphere-liberty"
    },
	"redmine": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "similar to couchbase, runs multiple programs",
        "image-name": "redmine",
        "image-url": "redmine",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "80"
    },
	"mediawiki": {
        "enable": "true",
	"status": "worked in angr and confine,but didn't in confine-,check it",
        "image-name": "mediawiki",
        "image-url": "mediawiki",
		"binaries": [
            "apache2"
        ],
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "81",
		"docker-cmd": [
            "apache2-foreground"
        ],
        "entrypoint": "docker-php-entrypoint",
        "docker-path": "/home/confine/mediawiki"
    },
	"clojure": {
        "enable": "false",
	"status": " complex runing, check it again",
        "image-name": "clojure",
        "image-url": "clojure",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "82"
    },
	"swift": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't run anything",
        "image-name": "swift",
        "image-url": "swift",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "83"
    },
	"amazoncorretto": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "does not run a service",
        "image-name": "amazoncorretto",
        "image-url": "amazoncorretto",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "84"
    },
	"oraclelinux": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation",
        "image-name": "oraclelinux",
        "image-url": "oraclelinux",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "85"
    },
	"haxe": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't work in confine either",
        "image-name": "haxe",
        "image-url": "haxe",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "86"
    },

	"phpmyadmin": {
        "enable": "true",
	"status": "dependet container, dependet to mysql, check it, option errors",
        "image-name": "phpmyadmin",
        "image-url": "phpmyadmin",
        "options": "",
        "args": "",
        "dependencies":        {
            "mysql": {
                "image-name": "mysql",
                "image-url": "mysql",
                "options": "-e MYSQL_ROOT_PASSWORD=aqwe123 ",
                "link": true
            
        }
		},
        "id": "87",
        "binaries": [
            ""
        ],
        "docker-cmd": [
            ""
        ],
        "entrypoint": "",
        "docker-path": "??"
    },
    "xwiki": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "runs multiple programs",
        "image-name": "xwiki",
        "image-url": "xwiki",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "89"
    },
    "mono": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't run anything",
        "image-name": "mono",
        "image-url": "mono",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "90"
    },
	"znc": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "doesn't work in confine either",
        "image-name": "znc",
        "image-url": "znc",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "91"
    },
	"iojs": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "DEPRECATED",
        "image-name": "iojs",
        "image-url": "iojs",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "92",
        "binaries": [
            "iojs"
        ],
        "docker-cmd": [
            "iojs"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/iojs"
    },
	"crate": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "not in confine due to complex configuration",
        "image-name": "crate",
        "image-url": "crate",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "93"
    },
	"ros": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "vanilla installation, and not in confine due to complex configuration",
        "image-name": "ros",
        "image-url": "ros",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "94"
    },
	"hylang": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "not in confine due to complex configuration",
        "image-name": "hylang",
        "image-url": "hylang",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "95"
    },
	"julia": {
        "enable": "false",
	"status": "worked in confine and angr,but in confine-, the seccomp profile created but it did not work, check it",
        "image-name": "julia",
        "image-url": "julia",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "96",
		"binaries": [
            "julia"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/julia"
    },
	 "tomee": {
        "enable": "false",
	"status": "worked in confine and angr, but in confine-, the seccomp profile created but it did not work, check it",
        "image-name": "tomee",
        "image-url": "tomee",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "97",
        "binaries": [
            "java"
        ],
        "docker-cmd": [
            "catalina.sh",
            "run"
        ],
        "entrypoint": "",
        "docker-path": "/home/confine/tomee"
    },
	"gcc": {
        "enable": "false",
        "image-name": "gcc",
        "image-url": "gcc",
	"status": "don't consider it",
        "reason": "vanilla installation, and not in confine due to complex configuration",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "98"
    },
	"orientdb": {
        "enable": "false",
	"status": "check it",
        "image-name": "orientdb",
        "image-url": "orientdb",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "99"
    },
	"storm": {
        "enable": "false",
	"status": "don't consider it",
        "reason": "not in confine due to complex configuration",
        "image-name": "storm",
        "image-url": "storm",
        "options": "",
        "args": "",
        "dependencies": {},
        "id": "100"
    }
}
